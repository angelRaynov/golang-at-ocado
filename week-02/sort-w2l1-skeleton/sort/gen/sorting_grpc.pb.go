// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SortingClient is the client API for Sorting service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SortingClient interface {
	LoadItems(ctx context.Context, in *LoadItemsRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	PickItem(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PickItemResponse, error)
	PlaceInCubby(ctx context.Context, in *PlaceInCubbyRequest, opts ...grpc.CallOption) (*StatusResponse, error)
}

type sortingClient struct {
	cc grpc.ClientConnInterface
}

func NewSortingClient(cc grpc.ClientConnInterface) SortingClient {
	return &sortingClient{cc}
}

func (c *sortingClient) LoadItems(ctx context.Context, in *LoadItemsRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/Sorting/LoadItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sortingClient) PickItem(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PickItemResponse, error) {
	out := new(PickItemResponse)
	err := c.cc.Invoke(ctx, "/Sorting/PickItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sortingClient) PlaceInCubby(ctx context.Context, in *PlaceInCubbyRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/Sorting/PlaceInCubby", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SortingServer is the server API for Sorting service.
// All implementations should embed UnimplementedSortingServer
// for forward compatibility
type SortingServer interface {
	LoadItems(context.Context, *LoadItemsRequest) (*StatusResponse, error)
	PickItem(context.Context, *emptypb.Empty) (*PickItemResponse, error)
	PlaceInCubby(context.Context, *PlaceInCubbyRequest) (*StatusResponse, error)
}

// UnimplementedSortingServer should be embedded to have forward compatible implementations.
type UnimplementedSortingServer struct {
}

func (UnimplementedSortingServer) LoadItems(context.Context, *LoadItemsRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadItems not implemented")
}
func (UnimplementedSortingServer) PickItem(context.Context, *emptypb.Empty) (*PickItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PickItem not implemented")
}
func (UnimplementedSortingServer) PlaceInCubby(context.Context, *PlaceInCubbyRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceInCubby not implemented")
}

// UnsafeSortingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SortingServer will
// result in compilation errors.
type UnsafeSortingServer interface {
	mustEmbedUnimplementedSortingServer()
}

func RegisterSortingServer(s grpc.ServiceRegistrar, srv SortingServer) {
	s.RegisterService(&Sorting_ServiceDesc, srv)
}

func _Sorting_LoadItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SortingServer).LoadItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Sorting/LoadItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SortingServer).LoadItems(ctx, req.(*LoadItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sorting_PickItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SortingServer).PickItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Sorting/PickItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SortingServer).PickItem(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sorting_PlaceInCubby_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaceInCubbyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SortingServer).PlaceInCubby(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Sorting/PlaceInCubby",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SortingServer).PlaceInCubby(ctx, req.(*PlaceInCubbyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Sorting_ServiceDesc is the grpc.ServiceDesc for Sorting service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sorting_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Sorting",
	HandlerType: (*SortingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoadItems",
			Handler:    _Sorting_LoadItems_Handler,
		},
		{
			MethodName: "PickItem",
			Handler:    _Sorting_PickItem_Handler,
		},
		{
			MethodName: "PlaceInCubby",
			Handler:    _Sorting_PlaceInCubby_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sorting.proto",
}
